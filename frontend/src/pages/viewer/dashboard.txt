import { useState, useEffect, useRef } from "react";
import axios from "axios";
import { jwtDecode } from "jwt-decode";
import Header from "../../components/operator/header";
import { MQTTService } from "../../services/mqttService";


// ======================================================
// == ðŸŽ¨ SCADA GLOBAL STYLES (Keyframes and Custom Shadows) ==
// ======================================================

// ======================================================
// == ðŸ”¥ FURNACE VISUAL ASSEMBLY (3D & HEAT EFFECT STYLE) ==
// ======================================================

const ScadaStyles = () => (
  <style>{`
    /* Efek rotasi lambat untuk kipas atau blower */
    @keyframes spin-slow {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    .animate-spin-slow {
      animation: spin-slow 4s linear infinite;
    }

    /* Efek panas berpendar */
    @keyframes heat-glow {
      0%, 100% { filter: brightness(1) drop-shadow(0 0 15px rgba(255,120,50,0.6)); }
      50% { filter: brightness(1.3) drop-shadow(0 0 25px rgba(255,90,0,0.8)); }
    }
    .animate-heat-glow {
      animation: heat-glow 3s ease-in-out infinite;
    }

    /* Efek berkilau logam */
    .metallic {
      background: linear-gradient(145deg, #5e5e5e, #8a8a8a);
      box-shadow: inset 2px 2px 6px rgba(255,255,255,0.2),
                  inset -2px -2px 6px rgba(0,0,0,0.3),
                  0 4px 10px rgba(0,0,0,0.4);
    }

    /* Efek ruang bakar */
    .furnace-glow {
      background: radial-gradient(circle at 50% 70%, rgba(255,100,0,0.8), rgba(120,20,0,0.8), #111);
      box-shadow: inset 0 0 25px rgba(255,80,0,0.6), 0 0 40px rgba(255,60,0,0.4);
      animation: flicker 2s ease-in-out infinite;
    }

    /* Efek nyala api berdenyut */
    @keyframes flicker {
      0%, 100% { opacity: 0.85; filter: brightness(1); }
      50% { opacity: 1; filter: brightness(1.2); }
    }

    /* Tekstur kaca depan furnace */
    .glass-window {
      background: linear-gradient(145deg, rgba(255,200,150,0.1), rgba(255,120,60,0.15));
      backdrop-filter: blur(2px);
      border: 2px solid rgba(255,130,50,0.3);
    }
  `}</style>
);

const FurnaceAssembly = ({
  furnaceName = "Furnace A",
  pressureValue = 3.5,
  pressureMax = 10,
  isActive = true,
}) => {
  return (
    <div className="flex flex-col items-center relative p-6">
      <ScadaStyles />

      {/* --- TOP SECTION: PIPE + GAUGE --- */}
      <div className="relative flex flex-col items-center">
        <div className="w-10 h-6 metallic border-2 border-gray-800 rounded-sm"></div>
        <div className="w-6 h-8 bg-gray-700 border-x-2 border-gray-800 -mt-1"></div>
        <div className="absolute top-[3.25rem]">
          <PressureGaugeVisual value={pressureValue} max={pressureMax} />
        </div>
      </div>

      {/* --- FURNACE BODY --- */}
      <div className="relative w-40 h-56 metallic border-4 border-gray-800 rounded-xl mt-10 overflow-hidden shadow-2xl">
        {/* Ruang bakar dalam */}
        <div className={`absolute inset-[12%] rounded-lg overflow-hidden transition-all duration-700 ${isActive ? 'furnace-glow' : 'bg-gray-800'}`}>
          {isActive && (
            <div className="absolute inset-0 bg-gradient-to-t from-red-700 via-orange-500 to-yellow-300 opacity-70 mix-blend-screen animate-heat-glow"></div>
          )}
        </div>

        {/* Kaca depan furnace */}
        <div className="absolute inset-[10%] glass-window rounded-lg"></div>

        {/* Pintu furnace */}
        <div className="absolute bottom-0 left-0 right-0 h-6 bg-gray-700 border-t-4 border-gray-900 rounded-b-xl shadow-inner"></div>

        {/* Pipa bawah & blower */}
        <div className="absolute -bottom-8 left-1/2 -translate-x-1/2 flex flex-col items-center">
          <div className={`w-20 h-4 rounded-md ${isActive ? 'bg-red-700 animate-spin-slow' : 'bg-gray-700'}`}></div>
          <div className="w-8 h-4 bg-gray-800 rounded-sm mt-1 shadow-md"></div>
        </div>
      </div>

      {/* --- NAME LABEL --- */}
      <h2 className="mt-6 text-lg font-bold text-gray-900 bg-gray-200 px-4 py-1 rounded-md shadow-inner border border-gray-400">
        {furnaceName}
      </h2>
    </div>
  );
};

// --- PRESSURE GAUGE COMPONENT (tidak diubah banyak, tapi diberi efek shadow 3D) ---
const PressureGaugeVisual = ({ value = 0, max = 10 }) => {
  const angle = Math.max(-135, Math.min((value / max) * 270 - 135, 135));
  return (
    <div className="w-20 h-20 bg-gray-300 border-4 border-gray-700 rounded-full flex items-center justify-center shadow-[inset_2px_2px_6px_rgba(255,255,255,0.4),_inset_-3px_-3px_6px_rgba(0,0,0,0.4)] relative">
      <div className="absolute inset-3 border border-gray-500 rounded-full"></div>
      <div
        className="absolute bottom-1/2 left-1/2 -translate-x-1/2 w-[2px] h-8 bg-black origin-bottom transition-transform duration-500 z-10"
        style={{ transform: `rotate(${angle}deg)` }}
      ></div>
      <div className="w-3 h-3 bg-gray-800 rounded-full z-20"></div>
      <span className="absolute -bottom-6 text-xs font-bold text-gray-800 bg-gray-100 px-1 py-0.5 rounded-sm shadow-sm">
        {Number(value).toFixed(2)} bar
      </span>
    </div>
  );
};


// ====================================================================
// == Â KOMPONEN UTAMA DASHBOARD Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ==
// ====================================================================

const Dashboard = () => {
Â  const [user, setUser] = useState(null);
Â  const [setpoints, setSetpoints] = useState({
Â  Â  furnace1: { suhu: "", tekanan: "" },
Â  Â  furnace2: { suhu: "", tekanan: "" },
Â  Â  furnace3: { suhu: "", tekanan: "" },
Â  });

Â  const [liveData, setLiveData] = useState({
Â  Â  furnace1: { suhu: "0.0", tekanan: "0.00" },
Â  Â  furnace2: { suhu: "0.0", tekanan: "0.00" },
Â  Â  furnace3: { suhu: "0.0", tekanan: "0.00" },
Â  });

Â  const [isConnected, setIsConnected] = useState(false);
Â  const [furnaceStatuses, setFurnaceStatuses] = useState({});
Â  const mqttServiceRef = useRef(null);
Â  const furnaceList = ["furnace1", "furnace2", "furnace3"];

Â  // ================= JWT USER LOAD =================
Â  useEffect(() => {
Â  Â  const token = localStorage.getItem("token");
Â  Â  if (token) {
Â  Â  Â  try {
Â  Â  Â  Â  const decodedToken = jwtDecode(token);
Â  Â  Â  Â  console.log("ISI SEBENARNYA DARI TOKEN:", decodedToken);
Â  Â  Â  Â  setUser(decodedToken);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("GAGAL DECODE TOKEN:", error);
Â  Â  Â  }
Â  Â  } else {
Â  Â  Â  console.log("Token tidak ditemukan di Local Storage.");
Â  Â  }
Â  }, []);

Â  const fetchFurnaceStatuses = async () => {
Â  Â  try {
Â  Â  Â  const token = localStorage.getItem("token");
Â  Â  Â  if (!token) {
Â  Â  Â  Â  console.error("Token tidak ditemukan.");
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  const res = await axios.get("http://localhost:5000/api/furnaces/status", {
Â  Â  Â  Â  headers: { "x-auth-token": token },
Â  Â  Â  });
Â  Â  Â  const statuses = res.data.reduce((acc, current) => {
Â  Â  Â  Â  acc[current.furnace_id] = current;
Â  Â  Â  Â  return acc;
Â  Â  Â  }, {});
Â  Â  Â  setFurnaceStatuses(statuses);
Â  Â  } catch (err) {
Â  Â  Â  console.error("Gagal mengambil status furnace:", err);
Â  Â  }
Â  };

Â  useEffect(() => {
Â  Â  fetchFurnaceStatuses();
Â  Â  const url = import.meta.env.VITE_MQTT_BROKER_URL;
Â  Â  const options = {
Â  Â  Â  username: import.meta.env.VITE_MQTT_USERNAME,
Â  Â  Â  password: import.meta.env.VITE_MQTT_PASSWORD,
Â  Â  };
Â  Â  const callbacks = {
Â  Â  Â  onConnect: () => {
Â  Â  Â  Â  setIsConnected(true);
Â  Â  Â  Â  mqttServiceRef.current?.subscribe("sensor/furnace/#");
Â  Â  Â  Â  mqttServiceRef.current?.subscribe("furnaces/events");
Â  Â  Â  },
Â  Â  Â  onMessage: (topic, payload) => {
Â  Â  Â  Â  const topicParts = topic.split("/");
Â  Â  Â  Â  if (topicParts[0] === "sensor" && topicParts[1] === "furnace") {
Â  Â  Â  Â  Â  const furnaceId = topicParts[2];
Â  Â  Â  Â  Â  if (furnaceList.includes(furnaceId)) {
Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  const data = JSON.parse(payload.toString());
Â  Â  Â  Â  Â  Â  Â  const suhuValue = data.suhu !== undefined ? Number(data.suhu).toFixed(1) : "0.0";
Â  Â  Â  Â  Â  Â  Â  const tekananValue = data.tekanan !== undefined ? Number(data.tekanan).toFixed(2) : "0.00";
Â  Â  Â  Â  Â  Â  Â  setLiveData((prev) => ({
Â  Â  Â  Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  Â  Â  Â  [furnaceId]: { suhu: suhuValue, tekanan: tekananValue },
Â  Â  Â  Â  Â  Â  Â  }));
Â  Â  Â  Â  Â  Â  } catch (e) {
Â  Â  Â  Â  Â  Â  Â  console.error("Gagal parse data JSON dari MQTT", e);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  if (topicParts[0] === "furnaces" && topicParts[1] === "events") {
Â  Â  Â  Â  Â  fetchFurnaceStatuses();
Â  Â  Â  Â  }
Â  Â  Â  },
Â  Â  Â  onClose: () => setIsConnected(false),
Â  Â  };
Â  Â  mqttServiceRef.current = new MQTTService(url, options, callbacks);
Â  Â  mqttServiceRef.current.connect();
Â  Â  return () => {
Â  Â  Â  mqttServiceRef.current?.disconnect();
Â  Â  };
Â  }, []);

Â  const handleStartSession = async (furnace) => {
Â  Â  try {
Â  Â  Â  const token = localStorage.getItem("token");
Â  Â  Â  await axios.post(
Â  Â  Â  Â  "http://localhost:5000/api/furnaces/start-session",
Â  Â  Â  Â  { furnace_id: furnace },
Â  Â  Â  Â  { headers: { "x-auth-token": token } }
Â  Â  Â  );
Â  Â  Â  alert(`Sesi untuk ${furnace} berhasil dimulai!`);
Â  Â  Â  fetchFurnaceStatuses();
Â  Â  } catch (err) {
Â  Â  Â  alert(err.response?.data?.message || "Terjadi kesalahan.");
Â  Â  }
Â  };

Â  const handleEndSession = async (furnace) => {
Â  Â  if (confirm(`Apakah Anda yakin ingin mengakhiri sesi pada ${furnace}?`)) {
Â  Â  Â  try {
Â  Â  Â  Â  const token = localStorage.getItem("token");
Â  Â  Â  Â  await axios.post(
Â  Â  Â  Â  Â  "http://localhost:5000/api/furnaces/end-session",
Â  Â  Â  Â  Â  { furnace_id: furnace },
Â  Â  Â  Â  Â  { headers: { "x-auth-token": token } }
Â  Â  Â  Â  );
Â  Â  Â  Â  alert(`Sesi untuk ${furnace} telah diakhiri.`);
Â  Â  Â  Â  fetchFurnaceStatuses();
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  alert(err.response?.data?.message || "Terjadi kesalahan.");
Â  Â  Â  }
Â  Â  }
Â  };

Â  const handleChange = (furnace, field, value) => {
Â  Â  setSetpoints((prev) => ({
Â  Â  Â  ...prev,
Â  Â  Â  [furnace]: { ...prev[furnace], [field]: value },
Â  Â  }));
Â  };

Â  const handleSubmit = async (furnace) => {
Â  Â  if (!user) {
Â  Â  Â  alert("Sesi pengguna tidak valid. Silakan login kembali.");
Â  Â  Â  return;
Â  Â  }
Â  Â  try {
Â  Â  Â  const { suhu, tekanan } = setpoints[furnace];
Â  Â  Â  if (suhu === "" || tekanan === "") {
Â  Â  Â  Â  alert("Setpoint suhu dan tekanan tidak boleh kosong!");
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  const topic = `setpoint/furnace/${furnace}`;
Â  Â  Â  const payload = JSON.stringify({ suhu: Number(suhu), tekanan: Number(tekanan) });
Â  Â  Â  mqttServiceRef.current?.publish(topic, payload);
Â  Â  Â  await axios.post("http://localhost:5000/api/setpoints", {
Â  Â  Â  Â  userID: user.id,
Â  Â  Â  Â  pressure_value: tekanan,
Â  Â  Â  Â  temperature_value: suhu,
Â  Â  Â  Â  furnace_id: furnace,
Â  Â  Â  });
Â  Â  Â  alert(`âœ… Setpoint untuk ${furnace} berhasil dikirim!`);
Â  Â  } catch (err) {
Â  Â  Â  alert("Gagal mengirim setpoint!");
Â  Â  }
Â  };

Â  if (!user) {
Â  Â  return (
Â  Â  Â  <div className="min-h-screen flex items-center justify-center bg-sky-100">
Â  Â  Â  Â  <p className="text-xl font-semibold">Memuat data pengguna...</p>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  return (
Â  Â  <div className="min-h-screen bg-sky-100 font-sans">
Â  Â  Â  <ScadaStyles />
Â  Â  Â  <Header />
Â  Â  Â  <div className="p-6">
Â  Â  Â  Â  <div className="flex justify-center items-center gap-4 mb-10">
Â  Â  Â  Â  Â  <h1 className="text-3xl font-bold text-gray-800">Operator Dashboard</h1>
Â  Â  Â  Â  Â  <div className="flex items-center gap-2 p-2 bg-white rounded-full shadow-md">
Â  Â  Â  Â  Â  Â  <span
Â  Â  Â  Â  Â  Â  Â  className={`h-4 w-4 rounded-full ${
Â  Â  Â  Â  Â  Â  Â  Â  isConnected ? "bg-green-500 animate-pulse" : "bg-red-500"
Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  ></span>
Â  Â  Â  Â  Â  Â  <span className="font-semibold">
Â  Â  Â  Â  Â  Â  Â  {isConnected ? "MQTT Connected" : "MQTT Disconnected"}
Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="flex flex-wrap justify-center items-start gap-16">
Â  Â  Â  Â  Â  {furnaceList.map((furnace, index) => {
Â  Â  Â  Â  Â  Â  const status = furnaceStatuses[furnace];
Â  Â  Â  Â  Â  Â  const isLockedByMe = status?.is_active && status?.active_userID === user.id;
Â  Â  Â  Â  Â  Â  const isLockedByOther = status?.is_active && status?.active_userID !== user.id;
Â  Â  Â  Â  Â  Â  // Ambil data suhu dan tekanan dari liveData
Â  Â  Â  Â  Â  Â  const liveSuhu = liveData[furnace].suhu;
Â  Â  Â  Â  Â  Â  const liveTekanan = liveData[furnace].tekanan;

Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  key={furnace}
Â  Â  Â  Â  Â  Â  Â  Â  className={`relative p-4 ${isLockedByOther ? "opacity-50" : ""}`}
Â  Â  Â  Â  Â  Â  Â  Â  style={{ minWidth: "450px", minHeight: "400px" }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {isLockedByOther && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-30 rounded-xl">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-white text-xl font-bold p-4 bg-red-600 rounded-lg">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Digunakan oleh User ID: {status.active_userID}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-center items-start gap-8">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative z-10 pt-16">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ThermometerVisual value={liveSuhu} max={100} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-col items-center gap-4 pt-16 z-10">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* START BUTTON (Green/Red - Power On/Off Status) */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ControlButtonVisual
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  label="START"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isActive={status?.is_active} // ON saat ada yang aktif
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleStartSession(furnace)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={status?.is_active || isLockedByOther}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isStartButton={true}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* STOP BUTTON (Red/Green - Power Off/On Status) */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ControlButtonVisual
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  label="STOP"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isActive={!status?.is_active} // ON saat tidak ada yang aktif (status mati)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleEndSession(furnace)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={!isLockedByMe || isLockedByOther}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isStartButton={false}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-col items-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FurnaceAssembly
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  furnaceName={`Furnace ${index + 1}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  pressureValue={liveTekanan}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  pressureMax={10}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  temperatureValue={liveSuhu}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isActive={status?.is_active}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-100 p-4 rounded-lg shadow-inner w-56 mt-4 border border-gray-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`font-bold text-center text-lg mb-2 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isLockedByMe ? "text-red-600 animate-pulse" : "text-gray-700"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Setpoint
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-col gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Suhu (Â°C)"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={setpoints[furnace].suhu}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => handleChange(furnace, "suhu", e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="border border-gray-400 rounded-md p-2 text-center disabled:bg-gray-200 disabled:cursor-not-allowed text-sm"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={!isLockedByMe || isLockedByOther}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Tekanan (bar)"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={setpoints[furnace].tekanan}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => handleChange(furnace, "tekanan", e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="border border-gray-400 rounded-md p-2 text-center disabled:bg-gray-200 disabled:cursor-not-allowed text-sm"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={!isLockedByMe || isLockedByOther}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleSubmit(furnace)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={!isLockedByMe || isLockedByOther}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mt-3 w-full bg-blue-500 text-white rounded-md py-2 text-sm font-semibold disabled:bg-gray-400 transition"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Kirim Setpoint
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default Dashboard;