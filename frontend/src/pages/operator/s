import { useState, useEffect } from "react";
import axios from "axios";
import { jwtDecode } from "jwt-decode";
import Header from "../../components/operator/header";
import { useMqtt } from "../../services/mqttContext";
import ScadaStyles from "../../components/operator/dashboard/scadaStyle";
import FurnaceCard from "../../components/operator/dashboard/furnaceCard";

const Dashboard = () => {
    const { mqttService, isConnected, liveData, isLoading: isMqttLoading, error: mqttError, furnaceList } = useMqtt();
    const [user, setUser] = useState(null);
    const [setpoints, setSetpoints] = useState({ furnace1: { suhu: "" }, furnace2: { suhu: "" }, furnace3: { suhu: "" } });
    const [furnaceStatuses, setFurnaceStatuses] = useState({});
    const [isStatusLoading, setIsStatusLoading] = useState(true);

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            try {
                const decodedToken = jwtDecode(token);
                setUser(decodedToken);
            } catch (error) {
                console.error("Gagal decode token:", error);
            }
        }
    }, []);

    const fetchFurnaceStatuses = async () => {
        setIsStatusLoading(true);
        try {
            const token = localStorage.getItem('token');
            if (!token) { console.error("Token tidak ditemukan."); return; }
            const res = await axios.get("http://localhost:5000/api/furnaces/status", {
                headers: { 'x-auth-token': token }
            });
            const statuses = res.data.reduce((acc, current) => {
                acc[current.furnace_id] = current;
                return acc;
            }, {});
            setFurnaceStatuses(statuses);
        } catch (err) {
            console.error("Gagal mengambil status furnace:", err);
        } finally {
            setIsStatusLoading(false);
        }
    };

    useEffect(() => {
        fetchFurnaceStatuses();
        const handleWindowFocus = () => {
            console.log("Window kembali fokus, merefresh status furnace...");
            fetchFurnaceStatuses();
        };
        window.addEventListener('focus', handleWindowFocus);
        return () => window.removeEventListener('focus', handleWindowFocus);
    }, []);

    const handleStartSession = async (furnace) => {
        try {
            const token = localStorage.getItem('token');
            await axios.post("http://localhost:5000/api/furnaces/start-session", 
                { furnace_id: furnace }, { headers: { 'x-auth-token': token } });
            alert(`Sesi untuk ${furnace} berhasil dimulai!`);
            fetchFurnaceStatuses();
        } catch (err) { alert(err.response?.data?.message || "Terjadi kesalahan."); }
    };
    
    const handleEndSession = async (furnace) => {
        if (confirm(`Apakah Anda yakin ingin mengakhiri sesi pada ${furnace}?`)) {
            try {
                const token = localStorage.getItem('token');
                await axios.post("http://localhost:5000/api/furnaces/end-session", 
                    { furnace_id: furnace }, { headers: { 'x-auth-token': token } });
                alert(`Sesi untuk ${furnace} telah diakhiri.`);
                fetchFurnaceStatuses();
            } catch (err) { alert(err.response?.data?.message || "Terjadi kesalahan."); }
        }
    };

    const handleChange = (furnace, field, value) => {
        setSetpoints((prev) => ({
            ...prev, [furnace]: { ...prev[furnace], [field]: value }
        }));
    };

// Ganti seluruh fungsi handleSubmit Anda dengan ini

const handleSubmit = async (furnace) => { // Tambahkan 'async' di sini
    if (!user) {
        alert("Sesi pengguna tidak valid. Silakan login kembali.");
        return;
    }
    try {
        const { suhu } = setpoints[furnace];
        if (suhu === "") {
            alert("Setpoint suhu tidak boleh kosong!");
            return;
        } 
        
        // 1. Kirim data ke perangkat via MQTT (ini sudah benar)
        const topic = `setpoint/furnace/${furnace}`;
        const payload = JSON.stringify({ suhu: Number(suhu) }); 
        mqttService?.publish(topic, payload);
        
        // 2. INI BAGIAN YANG HILANG DAN SANGAT PENTING
        // Kirim data yang sama ke backend untuk disimpan di database
        const token = localStorage.getItem('token');
        await axios.post("http://localhost:5000/api/setpoints", {
            userID: user.id, 
            temperature_value: suhu,
            furnace_id: furnace,
        }, {
            headers: { 'x-auth-token': token }
        });
        
        alert(`âœ… Setpoint untuk ${furnace} berhasil dikirim dan disimpan!`);

    } catch (err) { 
        console.error("Gagal mengirim atau menyimpan setpoint:", err);
        alert("Gagal mengirim atau menyimpan setpoint!"); 
    }
};
    if (isMqttLoading || isStatusLoading) {
        return <div className="min-h-screen flex items-center justify-center bg-sky-100"><p className="text-xl font-semibold">Menyiapkan koneksi dan data...</p></div>;
    }
    if (mqttError) {
        return <div className="min-h-screen flex items-center justify-center bg-red-100"><p className="text-xl font-semibold text-red-700">{mqttError}</p></div>;
    }

    return (
        <div className="min-h-screen bg-sky-100 font-sans">
            <ScadaStyles />
            <Header />
            <div className="p-6">
                <div className="flex justify-center items-center gap-4 mb-10">
                    <h1 className="text-3xl font-bold text-gray-800">Monitoring & Kontrol Furnace</h1>
                    <div className="flex items-center gap-2 p-2 bg-white rounded-full shadow-md">
                        <span className={`h-4 w-4 rounded-full ${isConnected ? 'bg-green-500 animate-pulse' : 'bg-red-500'}`}></span>
                        <span className="font-semibold">{isConnected ? 'MQTT Connected' : 'MQTT Disconnected'}</span>
                    </div>
                </div>

                <div className="flex flex-wrap justify-center items-start gap-16">
                    {furnaceList.map((furnace, index) => {
                        const currentData = liveData[furnace] || { suhu: "0.0", tekanan: "0.00" };
                        return (
                            <FurnaceCard
                                key={furnace}
                                furnace={furnace}
                                index={index}
                                status={furnaceStatuses[furnace]}
                                user={user}
                                currentData={currentData}
                                setpoints={setpoints}
                                onStartSession={handleStartSession}
                                onEndSession={handleEndSession}
                                onSetpointChange={handleChange}
                                onSetpointSubmit={handleSubmit}
                            />
                        );
                    })}
                </div>
            </div>
        </div>
    );
};

export default Dashboard;