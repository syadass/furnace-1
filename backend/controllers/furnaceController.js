// backend/controllers/furnaceController.js

const db = require('../config/db');
const { getClient } = require('../services/mqttService');

exports.getFurnaceStatus = (req, res) => {
Â  db.query('SELECT * FROM furnace_status', (err, results) => {
Â  Â  if (err) return res.status(500).json({ message: err.message });
Â  Â  res.json(results);
Â  });
};

exports.startSession = (req, res) => {
Â  // Tambahkan console.log untuk debugging
Â  console.log("Mencoba memulai sesi. User dari token:", req.user);
Â Â 
Â  const { furnace_id } = req.body;
Â Â 
Â  // Pastikan req.user dan req.user.id ada sebelum digunakan
Â  if (!req.user || !req.user.id) {
Â  Â  return res.status(401).json({ message: "Otentikasi gagal, user tidak ditemukan." });
Â  }
Â  const userID = req.user.id;
Â Â 
Â  const mqttClient = getClient();

Â  const checkQuery = 'SELECT * FROM furnace_status WHERE furnace_id = ? AND is_active = TRUE';
Â  db.query(checkQuery, [furnace_id], (err, results) => {
Â  Â  if (err) return res.status(500).json({ message: err.message });
Â  Â  if (results.length > 0) {
Â  Â  Â  return res.status(409).json({ message: 'Furnace sedang digunakan oleh user lain.' });
Â  Â  }

Â  Â  const updateQuery = 'UPDATE furnace_status SET is_active = TRUE, active_userID = ?, session_startTime = NOW() WHERE furnace_id = ?';
Â  Â  db.query(updateQuery, [userID, furnace_id], (err, result) => {
Â  Â  Â  if (err) return res.status(500).json({ message: err.message });
Â  Â  Â Â 
Â  Â  Â  console.log(`ðŸš€ Mengirim perintah MULAI SESI ke ${furnace_id}`);
Â  Â  Â Â 
Â  Â  Â  const setpointTopic = `setpoint/furnace/${furnace_id}`;
Â  Â  Â  const controlTopic = `control/furnace/${furnace_id}`;

Â  Â  Â  mqttClient.publish(setpointTopic, JSON.stringify({ suhu: 70 }), { qos: 1 });
Â  Â  Â  mqttClient.publish(controlTopic, JSON.stringify({ mode: "auto" }), { qos: 1 });
Â  Â  Â Â 
Â  Â  Â  res.json({ message: `Sesi untuk ${furnace_id} berhasil dimulai.` });
Â  Â  });
Â  });
};

exports.endSession = (req, res) => {
Â  // Tambahkan console.log untuk debugging
Â  console.log("Mencoba mengakhiri sesi. User dari token:", req.user);

Â  const { furnace_id } = req.body;

Â  // Pastikan req.user dan req.user.id ada sebelum digunakan
Â  if (!req.user || !req.user.id) {
Â  Â  return res.status(401).json({ message: "Otentikasi gagal, user tidak ditemukan." });
Â  }
Â  const userID = req.user.id;

Â  const mqttClient = getClient();

Â  const checkQuery = 'SELECT * FROM furnace_status WHERE furnace_id = ? AND active_userID = ?';
Â  db.query(checkQuery, [furnace_id, userID], (err, results) => {
Â  Â  if (err) return res.status(500).json({ message: err.message });
Â  Â  if (results.length === 0) {
Â  Â  Â  return res.status(403).json({ message: 'Anda tidak berhak mengakhiri sesi ini.' });
Â  Â  }

Â  Â  const updateQuery = 'UPDATE furnace_status SET is_active = FALSE, active_userID = NULL, session_startTime = NULL WHERE furnace_id = ?';
Â  Â  db.query(updateQuery, [furnace_id], (err, result) => {
Â  Â  Â  if (err) return res.status(500).json({ message: err.message });
Â  Â  Â Â 
Â  Â  Â  console.log(`ðŸš€ Mengirim perintah AKHIRI SESI ke ${furnace_id}`);
Â  Â  Â  const controlTopic = `control/furnace/${furnace_id}`;
Â  Â  Â Â 
Â  Â  Â  // âœ… PERBAIKAN: Gabungkan perintah menjadi satu payload
Â  Â  Â  const payload = JSON.stringify({
Â  Â  Â  Â  mode: "manual",
Â  Â  Â  Â  power: "off"
Â  Â  Â  });
Â  Â  Â  mqttClient.publish(controlTopic, payload, { qos: 1 });
Â  Â  Â Â 
Â  Â  Â  res.json({ message: `Sesi untuk ${furnace_id} telah berakhir.` });
Â  Â  });
Â  });
};
